import matplotlib.pyplot as plt
import geopandas as gpd
import pandas as pd
import os
from mpl_toolkits.axes_grid1 import make_axes_locatable
from shapely.geometry import box
import seaborn as sns

pdir = r'p:\11209200-020-sociale-kwetsbaarheid'

# ----------------- configurations -----------------
T = 10
# how to aggregate max damages, total = sum, average per building = mean
method = 'average'  # "total" or "average"
building_type = "residential"
# consider the whole extent or only the inner ring
extent = 'full_extent'  # "full_extent" or "inner_ring"
# boundary for the income classes "high", "med" or "low
pd.set_option('display.max_columns', None)

# ----------------- load data -----------------

if T == 2 or T == 10:
    if method == "average":
        vmax1 = 300
        vmin2 = -50
        vmax2 = 50
    elif method == "total":
        vmax1 = 550000
        vmin2 = -200000
        vmax2 = 200000
    else:
        print('please specify average or total')
else:
    print('Only damages for T=2 and T=10 have been calculated')

azone = gpd.read_file(os.path.join(pdir, 'Data', 'Income', 'AZONE.shp'))
ew_low = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'EW', f'AZONE_T{T}_{building_type}_{method}_low.csv'))
ew_med = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'EW', f'AZONE_T{T}_{building_type}_{method}_med.csv'))
ew_high = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'EW', f'AZONE_T{T}_{building_type}_{method}_high.csv'))
tot_dam = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'AZONE', f'AZONE_T{T}_{building_type}_{method}_damages.csv'))

# ----------------- process data -----------------
# rename id
azone.index.names = ["IDazone"]

# merge gdf with df
azone[f'TD_T{T}'] = tot_dam['TD_E']

# extent
if extent == "inner_ring":
    ew_low = ew_low[ew_low['inner_ring'] == 'Yes']
    ew_med = ew_med[ew_med['inner_ring'] == 'Yes']
    ew_high = ew_high[ew_high['inner_ring'] == 'Yes']

azone[f'EW_low_T{T}'] = ew_low['EW_TD_E']
azone[f'EW_med_T{T}'] = ew_med['EW_TD_E']
azone[f'EW_high_T{T}'] = ew_high['EW_TD_E']

azone['diff_EW_low'] = ew_low['diff_TD-EW']
azone['diff_EW_med'] = ew_med['diff_TD-EW']
azone['diff_EW_high'] = ew_high['diff_TD-EW']

# mask where EW is not nan to facilitate comparison
azone = azone[azone[f'EW_low_T{T}'].notnull()]

# boundaries to exclude areas where FIAT results not available
xmin = -63.26
xmax = -63.05
ymin = -17.9
ymax = -17.65

bbox = box(xmin, ymin, xmax, ymax)
azone = gpd.clip(azone, mask=bbox)
print(f'There are {len(azone)} AZONES considered')
# to zoom in
# xlim = ([None, -62.9])
# ylim = ([-17.95, -17.55])

# convert to dataframe to sum rows
df = pd.DataFrame(azone[[f'TD_T{T}', f'EW_low_T{T}', f'EW_med_T{T}', f'EW_high_T{T}']])
df = df.sum()

# ----------------- plotting -----------------

# plot the total residential damages
fig, ax = plt.subplots(1, figsize=(5, 5))
azone.plot(column=f'TD_T{T}', ax=ax, cmap='OrRd', vmax=vmax1, legend=True)
ax.title.set_text(f'{method} Residential Damages for T={T}')
plt.savefig(os.path.join(pdir, 'Figures', 'Residential', f'T{T}_{building_type}_{method}_{extent}_dam.png'))

# plot in the same figure the EW total residential damages for the chosen T for low, med and high along with the
# difference with respect to the total residential damages
fig, axes = plt.subplots(2, 3, figsize=(16, 10))
ax = axes.flatten()

ax0_divider = make_axes_locatable(ax[0])
ax1_divider = make_axes_locatable(ax[1])
ax2_divider = make_axes_locatable(ax[2])
ax3_divider = make_axes_locatable(ax[3])
ax4_divider = make_axes_locatable(ax[4])
ax5_divider = make_axes_locatable(ax[5])

cax0 = ax0_divider.append_axes("right", size="5%", pad="1%")
cax1 = ax1_divider.append_axes("right", size="5%", pad="1%")
cax2 = ax2_divider.append_axes("right", size="5%", pad="1%")
cax3 = ax3_divider.append_axes("right", size="5%", pad="1%")
cax4 = ax4_divider.append_axes("right", size="5%", pad="1%")
cax5 = ax5_divider.append_axes("right", size="5%", pad="1%")

azone.plot(column=f'EW_low_T{T}', ax=ax[0], cax=cax0, cmap='OrRd', vmax=vmax1, legend=True)
azone.plot(column=f'EW_med_T{T}', ax=ax[1], cax=cax1, cmap='OrRd', vmax=vmax1, legend=True)
azone.plot(column=f'EW_high_T{T}', ax=ax[2], cax=cax2, cmap='OrRd', vmax=vmax1, legend=True)

azone.plot(column='diff_EW_low', ax=ax[3], cax=cax3, cmap='bwr_r', vmin=vmin2, vmax=vmax2, legend=True)
azone.plot(column='diff_EW_med', ax=ax[4], cax=cax4, cmap='bwr_r', vmin=vmin2, vmax=vmax2, legend=True)
azone.plot(column='diff_EW_high', ax=ax[5], cax=cax5, cmap='bwr_r', vmin=vmin2, vmax=vmax2, legend=True)

ax[0].title.set_text(f'Lower EW {method} Residential Damages')
ax[1].title.set_text(f'Medium EW {method} Residential Damages')
ax[2].title.set_text(f'Higher EW {method} Residential Damages')
ax[3].title.set_text('TD Event - Lower EW')
ax[4].title.set_text('TD Event - Medium EW')
ax[5].title.set_text('TD Event - Higher EW')

plt.suptitle(f"Event T={T}")
plt.tight_layout()
plt.savefig(os.path.join(pdir, 'Figures', 'Residential', f'T{T}_{building_type}_{method}_{extent}_EW_dam.png'))

# bar chart of total
plt.figure(figsize=(5, 4))
sns.barplot(x=df.index, y=df.values)
plt.title(f'Sum of {method} Residential Damages')
plt.ylabel('Bs')
plt.tight_layout()
plt.savefig(os.path.join(pdir, 'Figures', 'Residential', f'T{T}_{building_type}_{method}_{extent}_bar_chart.png'))

plt.show()