import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

pdir = r'p:\11209200-020-sociale-kwetsbaarheid\Data'

# ----------------- configurations -----------------
T = 2
# how to aggregate max damages, total = sum, average per building = mean
method = 'average'  # "total" or "average"
building_type = "residential"
peopleperhh = 2.3
pd.set_option('display.max_columns', None)
# consider the whole extent or only the inner ring
extent = 'inner_ring'  # "full_extent""inner_ring"
# boundary for the income classes "high" "med"or "low
boundary_type = 'high'
# ----------------- load data -----------------
tdam = pd.read_csv(os.path.join(pdir, 'FIAT', 'AZONE', f'AZONE_T{T}_{building_type}_{method}_damages.csv'), index_col="IDazone")  # 132
inc = pd.read_excel(os.path.join(pdir, 'Income', 'Income.xlsx'), sheet_name="AZONE", index_col="AZONE")  # 152
pop = pd.read_csv(os.path.join(pdir, 'Income', 'AZONE_Pop16.csv'), index_col="IDazone")  # 152

# ----------------- process data -----------------
# R income information
if boundary_type == 'low':
    R = np.array([1500, 2000, 4000, 6000, 8000, 10000, 12000, 14000]) / peopleperhh * 12  # [months/year]
elif boundary_type == 'high':
    R = np.array([1999, 3999, 5999, 7999, 9999, 11999, 13999, 14500]) / peopleperhh * 12  # [months/year]
elif boundary_type == 'med':
    R = np.array([1500, 3000, 5000, 7000, 9000, 11000, 13000, 14500]) / peopleperhh * 12  # [months/year]
else:
    print('please specify high, med, low')

# equity weight gamma
gamma = 1.2

if extent == "inner_ring":
    print('Considering only inner circle')
    # filter dataframes to only keep inner circle
    inner_ring = [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 94, 95, 96, 97, 98, 99]
    tdam = tdam.loc[tdam.index.isin(inner_ring)]
    inc = inc.loc[inc.index.isin(inner_ring)]
    pop = pop.loc[pop.index.isin(inner_ring)]

elif extent == "full_extent":
    print('Considering full computed extent')

else:
    print('please specify either inner_ring or full_extent')

# rename index
inc.index.names = ["IDazone"]
# pop.index.names = ["IDazone"]
# tdam.index.name = ["IDazone"]

# add total damages event
inc['TD_E'] = tdam['TD_E']

# total population
totpop = pop.sum().item()
print(f"The total population considered is {round(totpop)}")

# income per capita per year per AZONE
inc['incpercapperyear'] = (inc['R1'] * R[0] + inc['R2'] * R[1] + inc['R3'] * R[2] + inc['R4'] * R[3] + inc['R5'] * R[4] \
                          + inc['R6'] * R[5] + inc['R7'] * R[6] + inc['R8'] * R[7]) / inc['Total']

# income per capita per year in the whole area
inc['incperyear'] = inc['incpercapperyear'] * pop['POP16']
totincpercapperyear = inc['incperyear'].sum() / totpop
print(f"The total income per capita per year is Bs {totincpercapperyear}")

# equity weight
inc['EW'] = (inc['incpercapperyear'] / totincpercapperyear)**-gamma
inc['EW_TD_E'] = inc['EW'] * inc['TD_E']

# difference between total damages minus EW damages
inc['diff_TD-EW'] = inc['TD_E'] - inc['EW_TD_E']
inc.to_csv(os.path.join(pdir, 'FIAT', 'EW', f'AZONE_T{T}_{building_type}_{method}_{extent}_{boundary_type}.csv'))
