import numpy as np
import math
from scipy.integrate import quad
from scipy.optimize import minimize

n = 1.5
p = 0.1


def delta_i(t, labda, v, i_wage):
    a = v * i_wage * math.e**(-labda*t)
    return a


def c_reco(t, labda, v, k_str):
    b = labda * v * k_str * math.e**(-labda * t)
    return b


c_negative = []


def c_t(t, labda, v, k_str, i_wage, c_0):
    delta_income = delta_i(t, labda, v, i_wage)
    c_recovery = c_reco(t, labda, v, k_str)

    c = c_0 - (c_recovery + delta_income)

    if np.all(t < np.array([0])):
        return c_0
    elif np.all(c < np.array([0])):
        c_negative.append(c)
        return c
    else:
        return c


def u_t(t, labda, v, k_str, i_wage, c_0):
    consump = c_t(t, labda, v, k_str, i_wage, c_0)
    utility = (consump**(1-n))/(1-n)
    return utility


def delta_W(labda, v, k_str, i_wage, c_0):
    def w(t, labda, v, k_str, i_wage, c_0):
        u_0 = (c_0**(1-n))/(1-n)
        u_time = u_t(t, labda, v, k_str, i_wage, c_0)
        w_t = (u_0 - u_time) *math.e**(-p*t)
        return w_t
    integral_W, error = quad(w,0,10,args=(labda, v, k_str, i_wage, c_0))
    return integral_W


def objective_function(labda, v, k_str, i_wage, c_0):
    integral_value, _ = quad(u_t, 0, 10, args=(labda, v, k_str, i_wage, c_0))
    return -integral_value  # Negate since we are using a minimization function


def optimal_labda(v, k_str, i_wage, c_0):
    # Initial guess for labda
        initial_labda_guess = 0.1

        # Minimize the negative of the objective function to find the maximum
        result = minimize(objective_function, initial_labda_guess, args=(v, k_str, i_wage, c_0), bounds=[(0.3, 1000)])

        # Extract the optimal labda value
        optimal_labda = result.x[0]
        return optimal_labda


def delta_c(t, labda, v, k_str, i_wage):
    return  c_reco(t, labda, v, k_str) + delta_i(t, labda, v, i_wage)


def total_delta_c(labda, v, k_str, i_wage):
    integral_delta_c, error = quad(delta_c, 0, 10, args=(labda, v, k_str, i_wage))
    return integral_delta_c


def total_delta_i(labda, v, i_wage):
    integral_delta_i, error = quad(delta_i, 0, 10, args=(labda, v, i_wage))
    return integral_delta_i