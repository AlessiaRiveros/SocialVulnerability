import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

pdir = r'p:\11209200-020-sociale-kwetsbaarheid'
csv_out = pdir + "/data_cleaned/Income/b_intermediate/income_dwelling.csv"

obj_shp = pdir + "/FIAT/2023_04_05_santa_cruz_run_20cm_groundfloorheight/Database/Exposure/santaCruz/clipped_ids.shp"
obj_gdf = gpd.read_file(obj_shp, rows=100)

# azone
azone_shp = pdir + "/data_cleaned/Income/a_raw/AZONE.shp"
azone_gdf = gpd.read_file(azone_shp)

# ingresos
ingresos_csv = pdir + "/data_cleaned/EW/10_database.csv"
ingresos_df = pd.read_csv(ingresos_csv)

# valor de vivienda por tipologia en Santa Cruz
tipo_vivienda = ["De Lujo", "Muy Buena", "Buena", "Economica", "Interes Social", "Marginal"]
valor_vivienda = [3423, 2283, 1516, 950, 570, 96]
vivienda_df = pd.DataFrame({"Tipo de vivienda": tipo_vivienda, "Valor de la vivienda [Bs/m2]": valor_vivienda})
# normalizar vivienda
vivienda_df["Valor normalizado"] = vivienda_df["Valor de la vivienda [Bs/m2]"]/vivienda_df["Valor de la vivienda [Bs/m2]"].max()

# normalizar ingresos
ingresos_df["I_cap_year_norm"] = ingresos_df["I_cap_year"] / ingresos_df["I_cap_year"].max()
ingresos_df.sort_values(by="I_cap_year_norm", ascending=False, inplace=True)
# drop nan values
ingresos_df.dropna(subset="I_cap_year_norm", inplace=True)

ingresos_df["dwelling"] = np.nan
# find closest value in normalized income to normalized dwelling
for dwelling_id in np.arange(0, 4):
    idx = ingresos_df.iloc[(ingresos_df["I_cap_year_norm"] - vivienda_df.loc[dwelling_id, "Valor normalizado"]).abs().argsort()[:1]].index.item()
    ingresos_df.loc[idx, "dwelling"] = vivienda_df.loc[dwelling_id, "Valor de la vivienda [Bs/m2]"]

# interpolate for the rest of the values
ingresos_df.set_index("I_cap_year_norm", inplace=True)
ingresos_df["dwelling"] = ingresos_df["dwelling"].interpolate(method="linear", limit_direction="both")
ingresos_df.reset_index(inplace=True)

# save df
ingresos_df[["IDazone", "I_cap_year_norm", "I_cap_year", "dwelling"]].to_csv(csv_out)
ingresos_df = ingresos_df[["IDazone", "I_cap_year_norm", "I_cap_year", "dwelling"]]
# add dwelling values to AZONE gpd based on the ID = IDazone
azone_gdf = azone_gdf.rename(columns={"ID": "IDazone"})
# TODO: combine azone_gdf info with ingresos_df
azone_gdf = azone_gdf.merge(ingresos_df, on="IDazone")

# get area of objects
obj_gdf["area"] = obj_gdf.area

# object and azone crs are not the same
obj_gdf = obj_gdf.to_crs("EPSG:4326")
# find objects corresponding to azone
gdf = obj_gdf.sjoin(azone_gdf, predicate="within")

# for each object id use the dwelling value x area
gdf["maxpotdam"] = gdf["AREA"] * gdf["dwelling"]
