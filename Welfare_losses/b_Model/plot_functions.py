import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np


def plot_utility(t_reco, u, l):
    """

    :param t_reco: list or array time after disaster
    :param u: list or array utility
    :param l:
    :return:
    """
    t_reco = np.array(t_reco)
    u = np.array(u)

    fig, ax = plt.subplots(figsize=(8, 5))

    ax.plot(t_reco, u, label=rf"$\lambda$ = {l:.1f}")
    ax.set_ylabel('u(t)')
    ax.set_xlabel('Time t after disaster (yrs)')
    ax.legend()
    plt.tight_layout()

    return fig


def plot_hh_cons(t_reco, c0, l, inc_loss_hh, reco_costs_hh, cons_loss_hh):
    """
    plots in a single figure the hh consumption, the hh reconstruction costs, and the hh income losse

    :param t_reco: list or array time after disaster
    :param c0: float predisaster consumption, assume c0 = inc0
    :param l: float lambda recovery rate
    :param inc_loss_hh: list or array income loss per household
    :param reco_costs_hh: list or array recovery costs per household
    :param cons_loss_hh: list or array consumption loss per household
    :return: fig
    """

    t_reco = np.array(t_reco)
    inc_loss_hh = np.array(inc_loss_hh)
    reco_costs_hh = np.array(reco_costs_hh)
    cons_loss_hh = np.array(cons_loss_hh)

    xmin = -0.25
    xmax = t_reco[-1]
    fs = 10
    ymin = (c0 - cons_loss_hh[0]) * 0.999
    ymax = c0 * 1.001

    def format_func(value, _):
        # Convert the value into a formatted string with spacing
        return "{:,.0f}".format(value)

    tau = np.log(1 / 0.05) / l

    fig, ax = plt.subplots(figsize=(8, 5))

    # change in consumption
    ax.plot(t_reco, c0 - cons_loss_hh, color="b", label="c(t)", ls="--", lw=1.2, zorder=9)
    kwargs = {"color": "b", "linestyle": "--", "linewidth": 1.2}
    ax.vlines(x=0, ymin=c0 - cons_loss_hh[0], ymax=c0, **kwargs)
    ax.hlines(y=c0, xmin=xmin, xmax=0, **kwargs)

    # add c0
    ax.text(xmin * 1.05, c0, "c$_0$", fontsize=fs, ha="right", va="center", color="k", zorder=10)

    # reconstruction cost
    ax.plot(t_reco, c0 - reco_costs_hh, color="green", alpha=0.8, lw=1, label="c$_{reco}$(t)", zorder=2)

    # change in income
    ax.plot(t_reco, c0 - inc_loss_hh, color="purple", alpha=0.8, lw=1, label=r"$\Delta$i", zorder=2)
    kwargs = {"color": "purple", "linestyle": "-", "linewidth": 1, "alpha": 0.8}
    ax.vlines(x=0, ymin=c0 - inc_loss_hh[0], ymax=c0, **kwargs)

    # recovery rate
    ax.plot([], [], " ", label=rf"$\lambda$ = {l:.1f}")

    # recovery time
    ax.axvline(x=tau, color="r", alpha=0.9, lw=0.6)
    ax.text(tau, ymax + 0.3, rf"$\tau$ = {tau:.2f}", fontsize=fs, ha="center", va="bottom", color="r",
            zorder=10)

    # formatting
    ax.yaxis.set_major_formatter(ticker.FuncFormatter(format_func))
    ax.set_xlim(xmin, xmax)
    ax.set_ylim(ymin, ymax)
    ax.set_ylabel('Household consumption, c(t)')
    ax.set_xlabel('Time t after disaster (yrs)')
    ax.legend(loc="lower right")

    return fig
