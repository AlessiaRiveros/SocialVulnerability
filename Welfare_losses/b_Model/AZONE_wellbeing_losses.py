##
import os
import geopandas as gpd
import pandas as pd
import tomli
from shapely.geometry import box
from Welfare_losses.b_Model.AZONE_functions import *
from Welfare_losses.b_Model.plot_functions import *

# TODO: split plotting to a different script under postprocessing
pdir = r'p:\11209200-020-sociale-kwetsbaarheid'
with open("../../config.toml", mode="rb") as fp:
# with open("config.toml", mode="rb") as fp:
    config = tomli.load(fp)

# ----------------- global variables and configurations  -----------------
pi = config['macro']['pi']
rho = config['macro']['rho']
eta = config['macro']['eta']
extreme_poverty = config['macro']['extremepoverty'] * 12
c_mean = config['income']['JICA'] * 12
method = 'total'  # total or average for aggregating at AZONE
T = 10  # return period
pd.set_option('display.max_columns', None)
tax = 0.13  # ?
csv_out = os.path.join(pdir, 'data_cleaned', 'Wellbeing', f'T{T}_database.csv')

# ----------------- load data -----------------


# AZONE geometry
gdf = gpd.read_file(os.path.join(pdir, 'Data', 'Income', 'AZONE.shp'))

# database created in EW module with the pop data, the fiat data and the income data in a single csv file
df = pd.read_csv(os.path.join(pdir, 'data_cleaned', 'EW', '10_database.csv'), index_col="IDazone")

# ----------------- preprocess data -----------------
# drop rows with nan values
df = df.dropna()
# remove rows where pop = 0
df = df[df['Pop2016'] != 0]
# remove rows where rel dam = 0
df = df[df['RelDam'] != 0]

# rename columns for simplicity
df = df.rename(columns={'TotPotDam': 'kprv', 'RelDam': 'v', 'TD_E': 'd_kprv', 'TD_E_hh': 'd_kprv_hh'})

# add average kprv per hh per azone
df['kprv_hh'] = df['d_kprv_hh'] / df['v']

# increase the vulnerability as a test
df['v'] = df['v'] * 40
df['d_kprv_hh'] = df['kprv_hh'] * df['v']

# add column for inc data with respect to mean income data
df['I_hh_year-I_mean'] = df['I_hh_year'] - c_mean

# df['v'] *= np.random.uniform(0.8, 1.2)

## plotting

# boundaries to exclude areas where FIAT results not available
xmin = config['bbox']['xmin']
xmax = config['bbox']['xmax']
ymin = config['bbox']['ymin']
ymax = config['bbox']['ymax']

bbox = box(xmin, ymin, xmax, ymax)
gdf = gpd.clip(gdf, mask=bbox)

# visualize
gdf['inc'] = df['I_hh_year']
gdf['inc-mean'] = df['I_hh_year-I_mean']
gdf['kprv'] = df['kprv_hh']
gdf['d_kprv'] = df['d_kprv_hh']
gdf['v'] = df['v']

## plot all the variables spatially
fig = plot_spatial_var(gdf, 'inc')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'inc_hh.png'))
# fig = plot_spatial_var(gdf, 'inc-mean')
# plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'inc-mean_hh.png'))
fig = plot_spatial_var(gdf, 'kprv')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'kprv_hh.png'))
fig = plot_spatial_var(gdf, 'd_kprv')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'd_kprv_hh.png'))
fig = plot_spatial_var(gdf, 'v')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'v_hh.png'))
plt.close()

## compute optimal recovery rate for all AZONES and plot it
df['l'] = df.apply(lambda row: optimize_reco_v1(row['v'], row['I_hh_year'], row['d_kprv_hh']), axis=1)

gdf['l'] = df['l']
fig = plot_spatial_var(gdf, 'l')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'l_hh.png'))
df['tau'] = df.apply(lambda row: tau(row['l']), axis=1)
gdf['tau'] = df['tau']

df = df.dropna()
gdf = gdf.dropna()
fig = plot_spatial_var(gdf, 'tau')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'tau_hh.png'))
plt.close()

df['tot_d_inc'] = df.apply(lambda row: total_inc_loss(row['l'], row['v'], row['I_hh_year']), axis=1)
df['tot_c_reco'] = df.apply(lambda row: total_reco_costs(row['l'], row['d_kprv_hh']), axis=1)
df['total_cons_loss'] = df.apply(lambda row: total_cons_loss(row['l'], row['v'], row['I_hh_year'], row['d_kprv_hh']), axis=1)
df['u0'] = df.apply(lambda row: u_0(row['I_hh_year']), axis=1)
# df['W'] = df.apply(lambda row: delta_W(row['l'], row['v'], row['d_kprv'], row['I_hh_year']), axis=1)
# df['Ceq'] = df['W'] / (c_mean**(-eta))

gdf['tot_d_inc'] = df['tot_d_inc']
gdf['tot_c_reco'] = df['tot_c_reco']
gdf['total_cons_loss'] = df['total_cons_loss']
# gdf['W'] = df['W']
# gdf['Ceq'] = df['Ceq']

fig = plot_spatial_var(gdf, 'tot_d_inc')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'tot_d_inc_hh.png'))

fig = plot_spatial_var(gdf, 'tot_c_reco')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'tot_c_reco_hh.png'))

fig = plot_spatial_var(gdf, 'total_cons_loss')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'total_cons_loss_hh.png'))

# fig = plot_spatial_var(gdf, 'W')
# plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'W_hh.png'))
#
# fig = plot_spatial_var(gdf, 'Ceq')
# plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Ceq.png'))

print(df)

## try for ID = 109 and ID = 45
print(df.sort_values(by=['v'], ascending=False))
# index = 109
ids = df.index.values
df['W'] = 0
df['Ceq'] = 0

for index in ids:

    v = df.loc[index, 'v'].item()
    inc = df.loc[index, 'I_hh_year'].item()
    d_kprv = df.loc[index, 'd_kprv_hh'].item()
    k_prv = df.loc[index, 'kprv_hh'].item()
    l = df.loc[index, 'l'].item()

    print(f"v={v:.3f} inc={inc:.0f} d_kprv={d_kprv:.0f} k_prv={k_prv:.0f}")

    d_inc = []
    c_reco = []
    d_c = []
    u = []
    u0 = inc**(1-eta)/(1-eta)

    t_reco = np.linspace(0, 3, 50, endpoint=True)
    # l=2

    for t in t_reco:
        d_inc.append(inc_loss(t, l, v, inc))
        c_reco.append(reco_costs(t, l, d_kprv))
        d_c.append(cons_loss(t, l, v, inc, d_kprv))
        u.append(utility(t, l, v, inc, d_kprv))

    fig = plot_utility(t_reco, u, l)
    plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Household', f'{index}_utility_hh.png'))

    fig, integral_W, Ceq = plot_w_integ(t_reco, u0, u)
    df.loc[index, 'W'] = integral_W
    df.loc[index, 'Ceq'] = Ceq
    plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Household', f'{index}_wellbeing_losses.png'))

    fig = plot_hh_cons(t_reco, inc, l, d_inc, c_reco, d_c)
    plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Household', f'{index}_consumption_change_hh.png'))
    plt.close()

print(df)

df.to_csv(csv_out)

gdf['W'] = -df['W']
gdf['Ceq'] = -df['Ceq']

gdf['diff_d_kprv-Ceq'] = gdf['d_kprv'] - gdf['Ceq']

fig = plot_spatial_var(gdf, 'W')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'W_hh.png'))

fig = plot_spatial_var(gdf, 'Ceq')
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Ceq.png'))

fig = plot_diff(gdf)
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'difference_map.png'))