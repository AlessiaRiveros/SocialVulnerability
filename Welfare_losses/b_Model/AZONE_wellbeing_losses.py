##
import os
import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import geopandas as gpd
import numpy as np
from mpl_toolkits.axes_grid1 import make_axes_locatable

from shapely.geometry import box
from Welfare_losses.b_Model.AZONE_functions import *
import tomli
with open(r"p:\11209200-020-sociale-kwetsbaarheid\Data\config.toml", mode="rb") as fp:
    config = tomli.load(fp)

# ----------------- global variables and configurations  -----------------
pi = config['pi']
rho = config['rho']
eta = config['eta']
extreme_poverty = config['extremepoverty'] * 12
method = 'total'  # total or average for aggregating at AZONE
T = 10  # return period
building_type = 'residential'  # consider only residential buildings
pd.set_option('display.max_columns', None)

tax = 0.13  # ?

# ----------------- load data -----------------
pdir = r'p:\11209200-020-sociale-kwetsbaarheid'

# AZONE geometry
gdf = gpd.read_file(os.path.join(pdir, 'Data', 'Income', 'AZONE.shp'))

# FIAT data at AZONE level -> total damages of residential buildings
df1 = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'AZONE', f'AZONE_T{T}_{building_type}_{method}_damages.csv'),
                  usecols=['IDazone', 'TD_E', 'TD_E_hh', 'RelDam', 'TotPotDam'])

# income data at AZONE level -> monthly income per household at AZONE level
df2 = pd.read_csv(os.path.join(pdir, 'Data', 'Income', 'AZONE_income.csv'), usecols=['ID', 'Income'])

# ----------------- process data -----------------
# rename id
df1 = df1.rename(columns={'IDazone': 'ID'})

# merge FIAT and income dataframes
df = pd.merge(df1, df2, how='inner', on='ID')

# rename columns for simplicity
df = df.rename(columns={'TotPotDam': 'kprv', 'Income': 'inc_hh', 'RelDam': 'v', 'TD_E': 'd_kprv', 'TD_E_hh': 'd_kprv_hh'})

# to translate it to per hh
df["kprv_hh"] = df["kprv"] * df["d_kprv_hh"] / df["d_kprv"]

# remove inf, 0 values
df = df.replace([np.inf, -np.inf, 0], np.nan)
df['inc_hh'] = df['inc_hh'] * 12  # convert to yearly

# Step 1
# income=consumption

# df['v'] *= np.random.uniform(0.8, 1.2)

# boundaries to exclude areas where FIAT results not available
xmin = -63.26
xmax = -63.05
ymin = -17.9
ymax = -17.65

bbox = box(xmin, ymin, xmax, ymax)
gdf = gpd.clip(gdf, mask=bbox)

# visualize
gdf['inc_hh'] = df['inc_hh']
gdf['kprv_hh'] = df['kprv_hh']
gdf['d_kprv_hh'] = df['d_kprv_hh']
gdf['v'] = df['v']

# gdf.plot(column='d_kprv_hh', legend=True)
# try for ID = 109 and ID = 45
##
print(df.sort_values(by=['v'], ascending=False))
index = 109
df = df.loc[df['ID'].isin([index])]


##

v = df['v'].item()
inc = df['inc_hh'].item()
d_kprv = df['d_kprv_hh'].item()

print(f"v={v} inc={inc} d_kprv={d_kprv}")

d_inc = []
c_reco = []
d_c = []
u = []

t_reco = np.linspace(0, 4, 100, endpoint=True)
# l=2
l = optimize_l(v, inc, d_kprv)
for t in t_reco:
    d_inc.append(inc_loss(t, l, v, inc))
    c_reco.append(reco_costs(t, l, d_kprv))
    d_c.append(cons_loss(t, l, v, inc, d_kprv))
    u.append(utility(t, l, v, inc, d_kprv))


ymax = inc

fig = plot_hh_cons(t_reco, inc, l, d_inc, c_reco, d_c)
plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'consumption_change_hh.png'))
plt.show()


