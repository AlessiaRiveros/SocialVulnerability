import os
import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
import geopandas as gpd
from mpl_toolkits.axes_grid1 import make_axes_locatable
from shapely.geometry import box
from AZONE_functions import *

pdir = r'p:\11209200-020-sociale-kwetsbaarheid'
building_type = 'residential'
method = 'total'
T = 10

gdf = gpd.read_file(os.path.join(pdir, 'Data', 'Income', 'AZONE.shp'))
# FIAT data at AZONE level
df1 = pd.read_csv(os.path.join(pdir, 'Data', 'FIAT', 'AZONE', f'AZONE_T{T}_{building_type}_{method}_damages.csv'))
# IDazone
# income data at AZONE level
df2 = pd.read_csv(os.path.join(pdir, 'Data', 'Income', 'AZONE_income.csv'))
# ID

# rename
df1 = df1.rename(columns={'IDazone': 'ID'})
# merge dataframes
df = pd.merge(df1, df2, how='inner', on='ID')

# Step 1
# Assume saving rate=0%, income = consumption

# global variables  I should use configuration files!
pi = 83541 / 170129  # average productivity
rho = 12.67 / 100  # discount rate
eta = 1.5
gdp = 22217  # gdp per capita in 2016 in BS

# Step 3
# Some capital is privately owned by the household
# Some are publicly-owned assets (roads, utilities, etc) that the hh uses to generate income
# Some are owned by other hh (factories), but generate income for the hh from labor
public_assets = 0.1
df = df.rename(columns={'TD_E': 'kprv', 'Income': 'inc'})
# df['kprv'] = (1-public_assets) * df['k']
df['k'] = (1-public_assets) / df['kprv']
df['kpub'] = public_assets * df['k']

# Step 2
# What does hh consumption tell us about its assets.
# TODO: Why is the flat tax not included here? Gross of taxes.
# I think we don't consider income from social nor how gov finances these
# df['capital'] = df['income']*(1-df['social'])/avg_prod_k
df['social'] = 1 - (df['k'] * pi) / df['inc']
# keff = Income /avg prod?
# keff = kprv + kpub + koth
# but this is ih-ih,sp

# Step 4
# When a hh is affected by a disaster, what fraction of its assets is destroyed?
# vulnerability defined as aggregated residential damage per tot potential damages at AZONE level
df = df.rename(columns={'RelDam': 'v'})
# Include a randon smearing factor to incorporate uncertainty (20%) without changing mean losses
df['v'] *= np.random.uniform(0.8, 1.2)

# Step 6
# Put it together: if a disaster happens and this hh is affected, how much does it lose?
# We assume here that all assets used by hh have same vulnerability as hh private assets
df['dk'] = df['k'] * df['v']
df['dkprv'] = df['kprv'] * df['v']
df['dkpub'] = df['kpub'] * df['v']

# Step 7
# Using the above equation, calculate income loss:
# --> Income from social systems & remittances 'social' is not vulnerable
df['dinc'] = df['dk'] * pi / (1 - df['social'])


df['loss'] = df.apply(well_loss, axis=1)
print(df['loss'])
# d_inc(t) = d_cap_prv*e^(-t*R_prv) + d_cap_pub*e^(-t*R_pub)


# boundaries to exclude areas where FIAT results not available
xmin = -63.26
xmax = -63.05
ymin = -17.9
ymax = -17.65

bbox = box(xmin, ymin, xmax, ymax)
gdf = gpd.clip(gdf, mask=bbox)

gdf['k'] = df['k']
gdf['kprv'] = df['kprv']
gdf['dinc'] = df['dinc']
gdf['dk'] = df['dk']
gdf['v'] = df['v']
gdf['loss'] = df['loss']


# ----------------- plotting -----------------
# TODO: plotting of intermediate steps as well
# what about focusing only on the inner ring first? or selecting a couple of AZONEs to compare at hh level and at AZONE

variables = {'v': 'Vulnerability',
             'k': 'Assets',
             'kprv': 'Private Capital',
             'dinc': 'Income Loss',
             'dk': 'Asset Loss',
             'loss': 'Cumulated Wellbeing Loss'}

for k, v in variables.items():
    fig, ax = plt.subplots(1, 1, figsize=(7, 5))
    ax_divider = make_axes_locatable(ax)
    cax = ax_divider.append_axes("right", size="5%", pad="1%")
    gdf.plot(column=k, ax=ax, cax=cax, legend=True)
    ax.set_title(v)
    plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', f'{v}.png'))
    plt.show()

# for dynamic variables select some AZONES for visualization?
cons_loss




