import os
import geopandas as gpd
import pandas as pd
import tomli
from shapely.geometry import box
import matplotlib.pyplot as plt


pdir = r'p:\11210264-001-just-equitable-paths\wellbeing'

T1 = 50
T2 = 100

# wellbeing model outputs for T=50 and T=100
csv_T1 = os.path.join(pdir, 'data', '4-output', f'database_T{T1}.csv')
csv_T2 = os.path.join(pdir, 'data', '4-output', f'database_T{T2}.csv')

source = "asphalt_based"

# AZONE geometry
gdf = gpd.read_file(os.path.join(pdir, 'data', '1-external', 'income', 'AZONE.shp'))
png_out = os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f"T{T1}_T{T2}.png")


# ----------------- process data -----------------

# read model output for T=50
df1 = pd.read_csv(csv_T1)
df1 = df1.dropna()
df1.set_index("ID", inplace=True, drop=True)
df1['Ceq'] = df1['Ceq'] * -1
df1 = df1[['I_hh_year', 'd_kprv_hh', 'Ceq', 'total_cons_loss']]

# read model output for T=100
df2 = pd.read_csv(csv_T2)
df2 = df2.dropna()
df2.set_index("ID", inplace=True, drop=True)
df2['Ceq'] = df2['Ceq'] * -1
df2 = df2[['I_hh_year', 'd_kprv_hh', 'Ceq', 'total_cons_loss']]

# merge housing asset losses, wellbeing losses and total consumption losses from both events


# group df by income quantiles
def quantiles(df):
    q1 = df.quantile(0.25)
    q2 = df.quantile(0.50)
    q3 = df.quantile(0.75)
    return q1, q2, q3


inc_q = quantiles(df1['I_hh_year'])
bins = [df1['I_hh_year'].min(), inc_q[0], inc_q[1], inc_q[2], df1['I_hh_year'].max()]
labels = ['low_incomes', 'mid_low_incomes', 'mid_high_incomes', 'high_incomes']

df1['category'] = pd.cut(df1['I_hh_year'], bins=bins, labels=labels)
df1_cat = df1.groupby(df1['category']).mean()
df1_cat.rename(columns={
    'd_kprv_hh': f'asset_loss_T{T1}',
    'Ceq': f'Ceq_T{T1}',
    'total_cons_loss': f'cons_loss_T{T1}'
}, inplace=True)
df1_cat.drop(columns=['I_hh_year'], inplace=True)

df2['category'] = pd.cut(df2['I_hh_year'], bins=bins, labels=labels)
df2_cat = df2.groupby(df2['category']).mean()
df2_cat.rename(columns={
    'd_kprv_hh': f'asset_loss_T{T2}',
    'Ceq': f'Ceq_T{T2}',
    'total_cons_loss': f'cons_loss_T{T2}'
}, inplace=True)
df2_cat.drop(columns=['I_hh_year'], inplace=True)

# merge both dataframes
df = pd.merge(
    df1_cat,
    df2_cat,
    how='inner',
    on='category'
)

# sort by income from highest to lowest
# df = df.sort_values(by="I_hh_year", ascending=False)

# gdf = gdf.merge(df, on='ID')
# inner circle map with some of the IDs highlighted!

# ----------------- plotting -----------------

# plot azone with ids
fig, ax = plt.subplots()
gdf.boundary.plot(ax=ax)
for i, label in enumerate(gdf.ID):
    ax.text(
        gdf.iloc[i].geometry.centroid.x,
        gdf.iloc[i].geometry.centroid.y,
        label
    )
ax.set_axis_off()
plt.tight_layout()


# plot bar chart
fig, ax = plt.subplots(figsize=(10, 6))

# plotting configurations
categories = ['Lowest\nincomes', 'Mid-low\nincomes', 'Mid-high\nincomes', 'Highest\nincomes']
colors = ['slategray', 'slategray', 'darkorange', 'darkorange', 'yellowgreen', 'yellowgreen']
edgecolors = ['slategray', 'darkslategray', 'darkorange', 'saddlebrown', 'yellowgreen', 'olivedrab']
hatches = [None, '////', None, '////', None, '////']

# bar chart
bars = df[['asset_loss_T50', 'asset_loss_T100', 'Ceq_T50', 'Ceq_T100', 'cons_loss_T50', 'cons_loss_T100']].plot(
    ax=ax,
    kind="bar",
    stacked=False,
    color=colors,
)

# hatches for one of the events only
for bars_container, hatch, edgecolor in zip(bars.containers, hatches, edgecolors):
    for bar in bars_container:
        bar.set_hatch(hatch)
        bar.set_edgecolor(edgecolor)

# legend
handles, labels = ax.get_legend_handles_labels()
custom_handles = [handles[i] for i in [0, 2, 4]]
custom_labels = ["Asset loss", "Well-being loss", "Consumption loss"]
ax.legend(custom_handles, custom_labels)

ax.set_xticks(range(len(categories)), categories, rotation=0)
ax.set_ylabel("Losses (Bs)")
ax.set_xlabel(" ")
ax.grid(True)
plt.tight_layout()
plt.savefig(png_out)
plt.show()