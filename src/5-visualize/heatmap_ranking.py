import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd
from shapely.geometry import box
from mpl_toolkits.axes_grid1 import make_axes_locatable
import numpy as np
import cartopy.crs as ccrs
import cartopy.io.img_tiles as cimgt
import contextily as cx
import tomli


# with open("../config.toml", mode="rb") as fp:
#     config = tomli.load(fp)

# ----------------- configurations -----------------
T = snakemake.params.t
# T = 100
method = snakemake.params.method
# extent = snakemake.params.extent
extent = "inner_ring"
boundary_type = 'low'

fig_heatmap = snakemake.output.heatmap_png
fig_map = snakemake.output.map_png

# ----------------- load data -----------------
df = pd.read_csv(snakemake.input.ew_csv)
gdf = gpd.read_file(snakemake.input.azone_shp)

# ----------------- process data -----------------

# df.index = df['IDazone']
# df = df.drop(columns='IDazone')
# boundaries to exclude areas where FIAT results not available
# xmin = config['bbox']['xmin']
# xmax = config['bbox']['xmax']
# ymin = config['bbox']['ymin']
# ymax = config['bbox']['ymax']
#
# bbox = box(xmin, ymin, xmax, ymax)
# gdf = gpd.clip(gdf, mask=bbox)

# extent
fs = 6

df = df[df['inner_ring'] == 'Yes']
fs = 10

df = df.dropna(subset=[f'SD_{T}_RP', f'EW_SD_{T}_RP'])
# df = df.dropna(subset=['EAD', 'EW_EAD'])
df['rank_SD_E'] = df[f'SD_{T}_RP'].rank(ascending=False).astype(int)
df['rank_EW_SD_E'] = df[f'EW_SD_{T}_RP'].rank(ascending=False).astype(int)
# df['rank_EAD'] = df['EAD'].rank(ascending=False).astype(int)
# df['rank_EW_EAD'] = df['EAD'].rank(ascending=False).astype(int)
df = df.rename(columns={"IDazone": "ID"})

# sort df by asset loss rank
df = df.sort_values(by='rank_TD_E')
# df = df.sort_values(by='rank_EAD')

gdf = gdf.merge(df, on='ID')
gdf_TD_E = gdf[(gdf['rank_SD_E']) <= 10]
gdf_EW_TD_E = gdf[(gdf['rank_EW_SD_E']) <= 10]
# gdf_TD_E = gdf[(gdf['rank_EAD']) <= 10]
# gdf_EW_TD_E = gdf[(gdf['rank_EW_EAD']) <= 10]
# gdf_TD_E = gdf[(gdf['rank_EAD']) <= 30]
# gdf_EW_TD_E = gdf[(gdf['rank_EW_EAD']) <= 30]

print(gdf_TD_E)

# format the dataframe for the heatmap
# keep only first 10 priorities of both
df = df[(df['rank_SD_E'] <= 10) | (df['rank_EW_SD_E'] <= 10)]
# df = df[(df['rank_EAD'] <= 10) | (df['rank_EW_EAD'] <= 10)]
print(df)
# set ID as index
df = df.set_index('ID')

# ----------------- plotting -----------------

# rename df columns for the heatmap figure
df = df.rename(columns={'rank_SD_E': 'Asset Losses', 'rank_EW_SD_E': 'EW Asset Losses'})
# df = df.rename(columns={'rank_EAD': 'Asset Losses', 'rank_EW_EAD': 'EW Asset Losses'})
# plot rank heatmaps from traditional damage and EW damage
fig, ax = plt.subplots(1, figsize=(5, 8))
sns.heatmap(df[['Asset Losses', 'EW Asset Losses']], ax=ax, annot=True)
ax.set_title(f'Policy preference ranking for T={T} event')
# ax.set_title(f'Policy preference ranking for the EAD')
plt.tight_layout()
plt.savefig(fig_heatmap)

# plot location on map of these areas
fig, ax = plt.subplots(1, 2, figsize=(10, 6))

ax0_divider = make_axes_locatable(ax[0])
ax1_divider = make_axes_locatable(ax[1])

cax0 = ax0_divider.append_axes("right", size="5%", pad="1%")
cax1 = ax1_divider.append_axes("right", size="5%", pad="1%")

print(gdf.crs)

# add sat background image
# Define the projection
# cx.add_basemap(ax[0], crs=gdf.crs)

gdf.boundary.plot(ax=ax[0], color='black', lw=0.8)
ax[0].set_axis_off()
gdf_TD_E.plot(column='rank_SD_E', ax=ax[0], cax=cax0, cmap='rocket', legend=True,
              legend_kwds={"label": "Top 10 priority areas"})
# gdf_TD_E.plot(column='rank_EAD', ax=ax[0], cax=cax0, cmap='rocket', legend=True)

gdf.boundary.plot(ax=ax[1], color='black', lw=0.8)
ax[1].set_axis_off()
gdf_EW_TD_E.plot(column='rank_EW_SD_E', ax=ax[1], cax=cax1, cmap='rocket', legend=True,
                 legend_kwds={"label":"Top 10 priority areas"})
# gdf_EW_TD_E.plot(column='rank_EW_EAD', ax=ax[1], cax=cax1, cmap='rocket', legend=True)

# add labels
for x, y, label in zip(gdf_TD_E.geometry.representative_point().x, gdf_TD_E.geometry.representative_point().y,
                       gdf_TD_E['ID']):
    ax[0].text(x, y, label, fontsize=fs, ha='right', va='bottom', color='grey', fontweight='bold')

for x, y, label in zip(gdf_EW_TD_E.geometry.representative_point().x, gdf_EW_TD_E.geometry.representative_point().y,
                       gdf_EW_TD_E['ID']):
    ax[1].text(x, y, label, fontsize=fs, ha='right', va='bottom', color='grey', fontweight='bold')

ax[0].title.set_text('Asset Losses')
ax[1].title.set_text('EW Asset Losses')
# fig.suptitle(f'Top 10 priority areas for T={T} event')
plt.tight_layout()
plt.savefig(fig_map)
plt.show()
