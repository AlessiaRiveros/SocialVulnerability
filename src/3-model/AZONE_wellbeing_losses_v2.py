##
import os
import geopandas as gpd
import pandas as pd
import tomli
from shapely.geometry import box
from AZONE_functions import *
from plot_functions import *

# TODO: split plotting to a different script under postprocessing
pdir = r'p:\11210264-001-just-equitable-paths\wellbeing'
with open("../../config.toml", mode="rb") as fp:
    # with open("config.toml", mode="rb") as fp:
    config = tomli.load(fp)

# ----------------- global variables and configurations  -----------------
pi = config['macro']['pi']
rho = config['macro']['rho']
eta = config['macro']['eta']
extreme_poverty = config['macro']['extremepoverty'] * 12
c_mean = config['income']['JICA'] * 12
method = 'total'  # total or average for aggregating at AZONE
pd.set_option('display.max_columns', None)
T = 100
source = "asphalt_based"  # or income_based
inner_ring = True
csv_out = os.path.join(pdir, 'data', '4-output', f'database_T{T}.csv')
# TODO: look at Karien's code?

# ----------------- load data -----------------

# AZONE geometry
gdf = gpd.read_file(os.path.join(pdir, 'data', '1-external', 'income', 'AZONE.shp'))

# database created in EW module with the pop data, the fiat data and the income data in a single csv file
df = pd.read_csv(os.path.join(pdir, 'data', '3-input', 'EW', source, 'database.csv'))

# ----------------- preprocess data -----------------
# drop rows with nan values
df = df.dropna()
# remove rows where pop = 0
df = df[df['Pop2016'] != 0]

# filter by inner ring
if inner_ring:
    df = df[df['inner_ring'] == "Yes"]

# rename columns for simplicity
df = df.rename(columns={'IDazone': 'ID', 'TotPotDam': 'kprv'})

# rename columns for simplicity
df = df.rename(columns={'IDazone': 'ID', 'TotPotDam': 'kprv', f'TD_{T}_RP': 'd_kprv', f'TD_{T}_RP_hh': 'd_kprv_hh'})

df['v'] = df['d_kprv'] / df['kprv']

# add average kprv per hh per azone
df['kprv_hh'] = df['d_kprv_hh'] / df['v']

## plotting

# boundaries to exclude areas where FIAT results not available
xmin = config['bbox']['xmin']
xmax = config['bbox']['xmax']
ymin = config['bbox']['ymin']
ymax = config['bbox']['ymax']

bbox = box(xmin, ymin, xmax, ymax)
gdf = gpd.clip(gdf, mask=bbox)
gdf = gdf.merge(df, on='ID')

## plot all the variables spatially
fig = plot_spatial_var(gdf, 'I_hh_year')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', 'inc_hh_ring.png'))
fig = plot_spatial_var(gdf, 'kprv_hh')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'kprv_hh_ring.png'))
fig = plot_spatial_var(gdf, 'd_kprv_hh')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'd_kprv_hh_T{T}_ring.png'))
fig = plot_spatial_var(gdf, 'v')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'v_T{T}_ring.png'))
plt.close()

## compute optimal recovery rate for all AZONES and plot it
df['l'] = df.apply(lambda row: optimize_reco_v1(row['v'], row['I_hh_year'], row['d_kprv_hh']), axis=1)
df['tau'] = df.apply(lambda row: tau(row['l']), axis=1)

df = df.dropna()

df['tot_d_inc'] = df.apply(lambda row: total_inc_loss(row['l'], row['v'], row['I_hh_year']), axis=1)
df['tot_c_reco'] = df.apply(lambda row: total_reco_costs(row['l'], row['d_kprv_hh']), axis=1)
df['total_cons_loss'] = df.apply(lambda row: total_cons_loss(row['l'], row['v'], row['I_hh_year'], row['d_kprv_hh']),
                                 axis=1)
# df['u0'] = df.apply(lambda row: u_0(row['I_hh_year']), axis=1)
# df['W'] = df.apply(lambda row: delta_W(row['l'], row['v'], row['d_kprv'], row['I_hh_year']), axis=1)
# df['Ceq'] = df['W'] / (c_mean**(-eta))

gdf = gdf.merge(df, on='ID')

fig = plot_spatial_var(gdf, 'l')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'l_hh_T{T}_ring.png'))

fig = plot_spatial_var(gdf, 'tau')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'tau_hh_T{T}_ring.png'))

fig = plot_spatial_var(gdf, 'tot_d_inc')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'tot_d_inc_hh_T{T}_ring.png'))

fig = plot_spatial_var(gdf, 'tot_c_reco')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'tot_c_reco_hh_{T}_ring.png'))

fig = plot_spatial_var(gdf, 'total_cons_loss')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'total_cons_loss_hh_{T}_ring.png'))

# fig = plot_spatial_var(gdf, 'W')
# plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'W_hh.png'))
#
# fig = plot_spatial_var(gdf, 'Ceq')
# plt.savefig(os.path.join(pdir, 'Figures', 'Welfare', 'Ceq.png'))

print(df)

# ## try for ID = 109 and ID = 45
# print(df.sort_values(by=['v'], ascending=False))
# # index = 109
ids = df['ID'].values
df['W'] = 0
df['Ceq'] = 0

for index in ids:

    v = df[df.ID == index].v.item()
    inc = df[df.ID == index].I_hh_year.item()
    d_kprv = df[df.ID == index].d_kprv_hh.item()
    k_prv = df[df.ID == index].kprv_hh.item()
    l = df[df.ID == index].l.item()

    print(f"v={v:.3f} inc={inc:.0f} d_kprv={d_kprv:.0f} k_prv={k_prv:.0f}")

    d_inc = []
    c_reco = []
    d_c = []
    u = []
    u0 = inc ** (1 - eta) / (1 - eta)

    t_reco = np.linspace(0, 10, 5000, endpoint=True)
    # l=2

    for t in t_reco:
        d_inc.append(inc_loss(t, l, v, inc))
        c_reco.append(reco_costs(t, l, d_kprv))
        d_c.append(cons_loss(t, l, v, inc, d_kprv))
        u.append(utility(t, l, v, inc, d_kprv))

    # fig = plot_utility(t_reco, u, l)
    # plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, 'household', f'{index}_utility_hh.png'))

    fig, integral_W, Ceq = plot_w_integ(t_reco, u0, u)
    df.loc[index, 'W'] = integral_W
    df.loc[index, 'Ceq'] = Ceq
    # plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, 'household', f'{index}_wellbeing_losses.png'))

    # fig = plot_hh_cons(t_reco, inc, l, d_inc, c_reco, d_c)
    # plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, 'household', f'{index}_consumption_change_hh.png'))
    # plt.close()

print(df)

df.to_csv(csv_out)
gdf = gdf.merge(df, on='ID')
gdf['W'] = gdf['W'] * -1
gdf['Ceq'] = gdf['Ceq'] * -1
gdf['diff_d_kprv-Ceq'] = gdf['d_kprv_hh'] - gdf['Ceq']

fig = plot_spatial_var(gdf, 'W')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'W_hh_T{T}_ring.png'))

fig = plot_spatial_var(gdf, 'Ceq')
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'Ceq_T{T}_ring.png'))

fig = plot_diff(gdf)
plt.savefig(os.path.join(pdir, 'reports', 'figures', 'wellbeing', source, f'difference_map_T{T}_ring.png'))
