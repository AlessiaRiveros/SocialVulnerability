import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import textwrap


pdir = r'p:\11209200-020-sociale-kwetsbaarheid'

pd.set_option('display.max_columns', None)

df = pd.read_spss(os.path.join(pdir, 'Data', 'INE', 'Bases_EPF_2015-2016', 'EPF1516_Vivienda.sav'))

"""
folio: unique hh id
s1_01: La vivienda es: Casa, Choza/Pahuichi, Departamento, Cuarto(s) o habitacón(es) suelta(s), ...
s1_02: La vivienda es: alquilada, propia y totalmente pagada, ...
s1_04: Material de construccion mas utilizado en las paredes
s1_06: Material mas utilizado en los techos exteriores
s1_07: Material mas utilizado en los pisos
s1_08: El agua para beber y cocinar la obtienen de ...
s1_09: y se distribuye por ...
s1_10: Tiene ba;o, servicio sanitario o letrina?
Tiene desague?
area: urbana
dept: 07 Santa Cruz
dominio: 07 Santa Cruz (metropolitano)
estrato: E. Bajo, E. Medio Bajo, E. Medio Alto, E. Alto
"""

df = df.loc[(df['area'] == 'Urbana') & (df['dept'] == '07 Santa Cruz') &
            (df['dominio'] == '07 Santa Cruz (metropolitano)')]

# drop area and dept
df = df.drop(columns=['area', 'dept', 'dominio'])

# dictionary with variable and what is corresponds to:
variable = {
    's1_01': 'House Type',
    's1_02': 'House Status',
    # 's1_03': 'Monthly Rent Value', # not categorical, maybe separate to plot in different manner
    's1_04': 'Wall Material',
    's1_05': 'Plastered Walls',
    's1_06': 'Roof Material',
    's1_07': 'Floor Material',
    's1_08': 'Water comes from',
    's1_09': 'Water is distributed via',
    's1_10': 'Toilets',
    's1_11': 'Toilet Sewage System',
    's1_12': 'Toilet is used only within hh or shared',
    's1_13': 'Energy is used to light the hh',
    's1_14': 'Exclusive room to cook',
    's1_15': 'Fuel or energy to cook food',
    # 's1_16': 'Number of rooms',
    # 's1_17': 'Number of rooms used to sleep',
    's1_18c': 'Hh has a fridge or freezer',
    's1_18d': 'Hh has a computer or laptop or tablet',
    's1_18f': 'Hh has a stereo',
    's1_18h': 'Hh has a flat screen TV',
    's1_18i': 'Hh has a washing machine',
    's1_18j': 'Hh has a drying machine',
    's1_21': 'Internet service'

}

# translate dwelling material to vulnerability
wall = {'Adobe/Tapial': 0.7,
        'Otro (especifique)': 0.7,
        'Ladrillo/Bloques de cemento/Hormigón': 0.1,
        'Madera': 0.7,
        'Tabique/Quinche': 0.14
        }

roof = {'Calamina o planca metálica': 0.3,
        'Losa de hormigón armando': 0.1,
        'Paja/caña/palma/barro': 0.7,
        'Teja (cemento/arcilla/fibrocemento)': 0.1
        }

floor = {'Cemento': 0.1,
         'Ladrillo': 0.1,
         'Mosaico/baldosas/cerámica': 0.4,
         'Tierra': 0.7,
         'Otro (especifique)': 0.7,
         'Tablón de madera': 0.7,
         'Machiembre/parquet': 0.7,
         }

# total rows
print(f'total rows {len(df)}')

# check nan values
print(df[['s1_04', 's1_06', 's1_07']].isna().sum())

# how many values per category
print(f'Wall \n {df.s1_04.value_counts()}')
print(f'Roof \n {df.s1_06.value_counts()}')
print(f'Floor \n {df.s1_07.value_counts()}')

# asset vulnerability is the average of roof, wall and floor vulnerability
df['s1_04'] = df['s1_04'].map(wall)
df['s1_06'] = df['s1_06'].map(roof)
df['s1_07'] = df['s1_07'].map(floor)

# how many values per category
print(f'Wall \n {df.s1_04.value_counts()}')
print(f'Roof \n {df.s1_06.value_counts()}')
print(f'Floor \n {df.s1_07.value_counts()}')

# vulnerability is average of the 3:
df['v'] = (df['s1_04'] + df['s1_06'] + df['s1_07']) / 3

# incorporate smearing factor
df['v'] *= np.random.uniform(0.8, 1.2)

# export this
df[['folio', 'v', 'estrato']].to_csv(os.path.join(pdir, 'Data', 'INE', 'processed', 'EPF1516_Vivienda_processed.csv'),
                                                  index=False)

# ----------------- plotting -----------------

# hue_order = ['E. Alto', 'E. Medio Alto', 'E. Medio Bajo', 'E. Bajo']
#
# for k, v in variable.items():
#
#     nb = len(df[k].unique())
#     fig, ax = plt.subplots(1, 1, figsize=(nb * 1.2, 5))
#
#     ax = sns.histplot(data=df, x=k, hue='estrato', hue_order=hue_order, multiple='stack', legend=False)
#     # sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1))
#     labels = [textwrap.fill(label.get_text(), 12) for label in ax.get_xticklabels()]
#     ax.set_xticklabels(labels, rotation=45)
#     plt.title(v, wrap=True)
#     plt.tight_layout()
#     plt.savefig(os.path.join(pdir, 'Figures', 'INE', f'dwelling_{v}.png'))
#     plt.close()
#

# visualize household asset vulnerability
print(f'maximum value: {df.v.max():.3f}')
print(f'mean value: {df.v.mean():.3f}')
print(f'median value: {df.v.median():.3f}')
print(f'minimum value: {df.v.min():.3f}')
fig, ax = plt.subplots(1)
ax = sns.histplot(data=df, x='v', binwidth=0.005, stat='count')
plt.yscale('log')
plt.savefig(os.path.join(pdir, 'Figures', 'INE', 'processed', 'Hh_asset_vulnerability.png'))
plt.show()